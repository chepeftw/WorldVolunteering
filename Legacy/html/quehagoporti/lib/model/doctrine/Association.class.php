<?php

/**
 * Association
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    quepuedohacerporti
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Association extends BaseAssociation
{
	
	public function getDepartmentsString()
	{
		$results = Doctrine::getTable('AssociationSurveyDepartment')->createQuery()->where('association_survey_id = '.$this->getId())->execute();
		
		$var = "";
		foreach( $results as $department )
			$var .= $department." ";
		
		return $var;
	}
	
	public function getSatRegistryString()
	{
		if( $this->getSatRegistry() )
			return "Si";
		return "No";
	}
	
	public function getDonationsString()
	{
		if( $this->getDonations() )
			return "Si";
		return "No";
	}
	
	public static function cleanString( $str )
	{
		$in = array( 'ñ', 'Ñ', 'á', 'é', 'í', 'ó', 'ú', ' ' );
		$out = array( 'n', 'N', 'a', 'e', 'i', 'o', 'u', '_' );
		return str_replace( $in, $out, $str );
	}
	
	public function getNameSlug()
	{
	  return RouteTools::slugify($this->getName());
	}
	
	public function getTownSlug()
	{
	  return RouteTools::slugify($this->getTown());
	}
	
	public function getFoundedSpanish()
	{
		$month = date("F", strtotime($this->getFounded()));
		$in = array( 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' );
		$out = array( 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre' );
		$month = str_replace( $in, $out, $month );
		
		return $month.' '.date("j, Y", strtotime($this->getFounded()));
	}
	
	public function getActualActivities()
	{
		return Doctrine::getTable('Activity')
						->createQuery()
						->where( 'is_active = 1 AND association_id = '.$this->getId() );
	}
	
	public function getHistoricActivities()
	{
		return Doctrine::getTable('Activity')
						->createQuery()
						->where( 'is_active = 0 AND association_id = '.$this->getId() );
	}
	
	public function getActualTestimonials()
	{
		return Doctrine::getTable('Testimonial')
						->createQuery()
						->where( 'is_active = 1 AND association_id = '.$this->getId() );
	}
	
	public function getAllActivities()
	{
		return Doctrine::getTable('Activity')
						->createQuery()
						->where( 'association_id = '.$this->getId() );
	}
	
	public function isMine( $user )
	{
		return Doctrine::getTable('Association')
					->createQuery()
					->where('id = '.$this->getId().' AND user_id = '.$user)
					->count();
	}
	
	public function getCountPhotos()
	{
		return Doctrine::getTable('Photo')
						->createQuery()
						->where('association_id = '.$this->getId())
						->count();
	}
	
	public function canHaveMorePhotos()
	{
		if( $this->getCountPhotos() >= 20 )
			return false;
			
		return true;
			
	}
	
	public function getCountVideos()
	{
		return Doctrine::getTable('Video')
						->createQuery()
						->where('association_id = '.$this->getId())
						->count();
	}
	
	public function canHaveMoreVideos()
	{
		if( $this->getCountVideos() >= 5 )
			return false;
			
		return true;
			
	}
	
	public function updateLuceneIndex()
	{
		$index = AssociationTable::getLuceneIndex();

		// remove existing entries
		foreach ($index->find('pk:'.$this->getId()) as $hit)
		{
			$index->delete($hit->id);
		}

		$doc = new Zend_Search_Lucene_Document();

		// store job primary key to identify it in the search results
		$doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));

		// index job fields
		$name = $this->cleanString( $this->getName() );
		$doc->addField(Zend_Search_Lucene_Field::UnStored('name', $name, 'utf-8'));

		// add job to the index
		$index->addDocument($doc);
		$index->commit();
	}
	
	public function save(Doctrine_Connection $conn = null, $normal = 1)
	{	 
	  $conn = $conn ? $conn : $this->getTable()->getConnection();
	  $conn->beginTransaction();
	  try
	  {
		$ret = parent::save($conn);
	 
		if( $normal )
		{
			$dir = '/var/chroot/home/content/32/7923232/html/uploads';
			//$dir = '/var/www/quehagoporti/web/uploads';
			$this->updateLuceneIndex();
			
			if( file_exists( $dir . '/logos/'.$this->getLogo() ) )
			{							
				$image = new SimpleImage();
				$image->load( $dir . '/logos/'.$this->getLogo() );
				
				// Normal Image
				$dimension = $image->getHeight();
				if( $image->getWidth() > $image->getHeight() )
					$dimension = $image->getWidth();
				
				if( $image->getHeight() > 0 && $image->getWidth() > 0 && ( $image->getHeight() > 620 || $image->getWidth() > 620 ) )
				{
					$image->scale( ( ( 620 / $dimension ) * 100 ) );
					$image->save( $dir . '/logos/'.$this->getLogo() );
				}
				// End Normal Image
				
				// Thumbnail Image
				$thumbnail = new SimpleImage();
				$thumbnail->load( $dir . '/logos/'.$this->getLogo() );
				
				$dimension = $thumbnail->getHeight();
				if( $thumbnail->getWidth() > $thumbnail->getHeight() )
					$dimension = $thumbnail->getWidth();
				
				if( $thumbnail->getHeight() > 0 && $thumbnail->getWidth() > 0 && ( $thumbnail->getHeight() > 100 || $thumbnail->getWidth() > 100 ) )
				{
					$thumbnail->scale( ( ( 100 / $dimension ) * 100 ) );
					$thumbnail->save( $dir.'/thumbnail/'.$this->getLogo() );
				}
				// End Thumbnail Image
			}
		}
		
		$conn->commit();
	 
		return $ret;
	  }
	  catch (Exception $e)
	  {
		$conn->rollBack();
		throw $e;
	  }
	}
	
	public function delete(Doctrine_Connection $conn = null)
	{
	  $index = AssociationTable::getLuceneIndex();
	 
	  foreach ($index->find('pk:'.$this->getId()) as $hit)
	  {
		$index->delete($hit->id);
	  }
	  
	  $videos = Doctrine::getTable('Video')
						->createQuery()
						->where('association_id = '.$this->getId())
						->execute();
	  foreach( $videos as $video ) $video->delete();
	  
	  $photos = Doctrine::getTable('Photo')
						->createQuery()
						->where('association_id = '.$this->getId())
						->execute();
	  foreach( $photos as $photo ) $photo->delete();
	  
	  $testimonials = Doctrine::getTable('Testimonial')
						->createQuery()
						->where('association_id = '.$this->getId())
						->execute();
	  foreach( $testimonials as $testimonial ) $testimonial->delete();
	  
	  $activities = Doctrine::getTable('Activity')
						->createQuery()
						->where('association_id = '.$this->getId())
						->execute();
	  foreach( $activities as $activity ) $activity->delete();
	 
	  return parent::delete($conn);
	}
	
}
